用数学语言来理解python的设计哲学

* 实例是由类调用构造函数创造

* 所有能够被标识符引用的东西都是对象, 也是实例

* 如果类A的实例也是类B的实例, 那么我们把A称为B的子类, 反之亦然

* 如果类A是类B的父类, 我们称类A是类B的基类.

* 基类具有传递性, 即类A是类B的基类,类B是类C的基类, 那么类A也是类B的基类

* 实例的父类和创建他的类的父类和基类是等价的.

* object是所有类的基类, 除了它本身

* type是所有元类的基类, 除了它本身

* 所有的类对象都是由元类的构造函数创造

推论一:
#+BEGIN_SRC python3
isinstance(type, object) == True
isinstance(type, type) == True
isinstance(object, type) == True
isinstance(object, object) == True
#+END_SRC
我来解释一下第三个语句的正确性

type是类对象, 类对象是由元类的构造函数创造, 元类...

推论二:
#+BEGIN_SRC python3
函数也是对象, 创造他的类实现了__call__方法的实例
#+END_SRC

推论三:
类是特殊的函数

* 有瑕疵的地方

** 类应该是特殊的函数, 类的实例化返回的是一个实例, 行为表现上和函数具有一致性
